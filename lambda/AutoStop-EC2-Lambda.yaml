AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to stop EC2 instances daily using Lambda and EventBridge.

Resources:
  # Create the IAM Role for Lambda with EC2 permissions
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'StopEC2InstancesPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:StopInstances'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # Create the Lambda function to stop EC2 instances
  StopEC2InstancesLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'StopEC2Instances'
      Runtime: 'python3.9'
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: 'index.lambda_handler'
      Code:
        ZipFile: |
          import boto3

          def stop_ec2_instances(regions):
              for region in regions:
                  print(f"Checking EC2 instances in region: {region}")
                  ec2 = boto3.client('ec2', region_name=region)
                  
                  # Get all running instances
                  instances = ec2.describe_instances(
                      Filters=[
                          {'Name': 'instance-state-name', 'Values': ['running']}
                      ]
                  )
                  
                  # Collect the instance IDs that should be stopped
                  instance_ids = []
                  for reservation in instances['Reservations']:
                      for instance in reservation['Instances']:
                          stop_instance = True
                          # Check for the 'DoNotStop' tag
                          if 'Tags' in instance:
                              for tag in instance['Tags']:
                                  if tag['Key'] == 'DoNotStop' and tag['Value'].lower() == 'true':
                                      stop_instance = False  # Exclude instances with DoNotStop=True
                                      break
                                    
                          if stop_instance:
                              instance_ids.append(instance['InstanceId'])

                  if instance_ids:
                      print(f"Stopping instances: {instance_ids}")
                      ec2.stop_instances(InstanceIds=instance_ids)
                  else:
                      print(f"No instances to stop in region: {region}")

          def lambda_handler(event, context):
              # List the regions where you have EC2 instances
              regions = ['us-east-1', 'us-west-2', 'eu-west-1', 'ap-south-1']
              
              stop_ec2_instances(regions)

  # Create an EventBridge Rule to trigger the Lambda function daily at midnight UTC
  StopEC2InstancesScheduler:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'DailyStopEC2InstancesSchedule'
      ScheduleExpression: 'cron(0 7 * * ? *)'  # Runs daily at midnight UTC
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt StopEC2InstancesLambda.Arn
          Id: 'TargetLambda'

  # Permission for EventBridge to invoke Lambda
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt StopEC2InstancesLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StopEC2InstancesScheduler.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the Lambda function that stops EC2 instances'
    Value: !GetAtt StopEC2InstancesLambda.Arn

  EventBridgeRuleName:
    Description: 'Name of the EventBridge rule that triggers the Lambda function'
    Value: !Ref StopEC2InstancesScheduler
