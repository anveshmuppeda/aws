AWSTemplateFormatVersion: 2010-09-09
Description: AWS Class - Creating VPC, NAT Gateway, Public & Private Subnetes, Internet Gateway, 
  and EIP Using the Cloud Formation Template. And deploying it in Dev, Test, and Prod. Based on the 
  environment deploying the respective server.

Parameters:
  UbuntuAmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."
    Default: /aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id

  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
    Default: eksWorkerKey
  
  InstanceType:
    Description: "Specify the Instance Type."
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t3.medium

Resources:
  DockerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Docker-SG
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: vpc-0905905b9d81e5d9a
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "Docker-SG"
        - Key: Application
          Value: Docker

  MyProdDockerServer:
    Type: AWS::EC2::Instance
    DependsOn: DockerSecurityGroup
    Properties:
      SubnetId: subnet-0aea3012d677f7843
      ImageId: !Ref UbuntuAmiID
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref DockerSecurityGroup
      Tags:
        - Key: Name
          Value: Docker-Server
        - Key: Application
          Value: Docker
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            #updating the apt repository
            apt-get update -y

            #Docker Installation
            #If you are running Linux you will need to install Docker directly. You should be logged in as a user with sudo privileges. First, you will need to ensure that you have the command line utility cURL. Do this by opening a terminal and typing
            which curl
            sudo apt-get update
            #If cURL is not installed, update your package manager and install it, using:
            sudo apt-get install curl
            #Now that you have cURL, you can use it to get the latest Docker package:
            curl -fsSL https://get.docker.com/ | sh
            #Add your account to the docker group.
            #sudo usermod -aG docker <your_username>, here <your_username> is root
            sudo usermod -aG docker root
            #This step is required to be able to run Docker commands as a non-root user. You will have to log out and log back in for the change to take effect.
            #Now you should have Docker! Verify that it is installed by running the hello-world container:
            docker run hello-world

            #Running our Actual Website using nginx:
            docker run -d -p 80:80 --name nginx nginx

Outputs:

  DockerWebsiteURL:
    Description: URL for Docker Website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - MyProdDockerServer
          - PublicIp